import os
import logging
import uvicorn
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from typing import Callable, Dict, Any, Awaitable
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import TelegramObject, InlineKeyboardMarkup, InlineKeyboardButton, Update, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
from collections import defaultdict

# üåê Load env vars
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
GROUP_CHAT_ID = '-1002649275599'
GROUP_URL = 'https://t.me/KinoTochkaUA'

# üöÄ Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# üöÄ Google Sheets creds
json_str = os.getenv("GOOGLE_SHEETS_CREDENTIALS_JSON")
if not json_str:
    raise Exception("‚ùå GOOGLE_SHEETS_CREDENTIALS_JSON not found")
creds_dict = json.loads(json_str)
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gs_client = gspread.authorize(creds)
sheet = gs_client.open_by_key('1pJU_6N3zyhRCdVfCPXD5RvHAvwVp0v71rKpvhpS3PC8').worksheet("–õ–∏—Å—Ç1")
data = sheet.get_all_records()

# üöÄ FastAPI & Aiogram
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# üîê Subscribe check
subscribe_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=GROUP_URL)]])

async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)
        logging.info(f"üîç {user_id} status: {chat_member.status}")
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"‚ùå Subscription check failed: {e}")
        return False

class SubscriptionMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]], event: TelegramObject, data: Dict[str, Any]) -> Any:
        if isinstance(event, types.Message):
            if event.text and any(cmd in event.text.lower() for cmd in ["/my_status", "/get_chat_id"]):
                return await handler(event, data)
            if not await check_subscription(event.from_user.id):
                await event.reply("‚ùå –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=subscribe_kb)
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())

# üî∏ –ú–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—à—É–∫üîç"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤üéΩ"), KeyboardButton(text="–ó–∞ –∂–∞–Ω—Ä–æ–º")],
        [KeyboardButton(text="–ú—É–ª—å—Ç–∏–∫–∏üëß"), KeyboardButton(text="–§—ñ–ª—å–º–∏")],
        [KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üçúüçª")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    try:
        logging.info(f"üëã /start –≤—ñ–¥ @{message.from_user.username} ({message.from_user.id})")

        if await check_subscription(message.from_user.id):
            await message.answer(
                "‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞!\n–û–±–∏—Ä–∞–π –∂–∞–Ω—Ä, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–ú–µ–Ω—é¬ª üëá",
                reply_markup=main_menu
            )
        else:
            await message.answer(
                "‚ùóÔ∏è–£–ø—Å! –í–∏ —â–µ –Ω–µ –∑ –Ω–∞–º–∏...\n\n–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª üëá",
                reply_markup=subscribe_kb
            )
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É /start: {e}")
        await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message(F.text == "–ü–æ—à—É–∫üîç")
async def search_prompt(message: types.Message):
    await message.answer("üîé –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É...")

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤üéΩ")
async def serials_handler(message: types.Message):
    await message.answer("üéΩ –°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤ –ø–æ–∫–∏ —â–æ –≥–æ—Ç—É—î—Ç—å—Å—è...")

@dp.message(F.text == "–ó–∞ –∂–∞–Ω—Ä–æ–º")
async def genres_handler(message: types.Message):
    await message.answer("üìÇ –û–±–µ—Ä–∏ –∂–∞–Ω—Ä –∑—ñ —Å–ø–∏—Å–∫—É...")

@dp.message(F.text == "–ú—É–ª—å—Ç–∏–∫–∏üëß")
async def cartoons_handler(message: types.Message):
    await message.answer("üéû –¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ –º—É–ª—å—Ç–∏–∫–∏ –¥–ª—è –¥—ñ—Ç–µ–π —ñ –¥–æ—Ä–æ—Å–ª–∏—Ö")

@dp.message(F.text == "–§—ñ–ª—å–º–∏")
async def movies_handler(message: types.Message):
    await message.answer("üé¨ –í–∏–±—Ä–∞–Ω—ñ —Ñ—ñ–ª—å–º–∏ –∑ –±–∞–∑–∏")

@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞üçúüçª")
async def invite_handler(message: types.Message):
    await message.answer("üêí –ü–æ–¥—ñ–ª–∏—Å—å –±–æ—Ç–æ–º –∑ –¥—Ä—É–≥–æ–º: https://t.me/KinoTochka24_bot")

@dp.message()
async def search_logic(message: types.Message):
    if not await check_subscription(message.from_user.id):
        return await message.answer("‚ùå –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å!", reply_markup=subscribe_kb)

    query = message.text.strip().lower()
    logging.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤: {message.text}")
    grouped = defaultdict(list)

    for row in data:
        title = row.get("–ù–∞–∑–≤–∞", "").strip()
        if query in title.lower():
            grouped[title].append(row)

    if not grouped:
        return await message.answer("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    for title, items in grouped.items():
        msg_parts = [f"üé¨ *{title}*"]
        for item in items:
            ep = item.get("–°–µ—Ä—ñ—è", "")
            desc = item.get("–û–ø–∏—Å", "")
            link = item.get("–ü–æ—Å–∏–ª–∞–Ω–Ω—è", "")
            msg_parts.append(f"üì∫ {ep} ‚Äî [{desc}]({link})")
        await message.answer("\n".join(msg_parts), parse_mode="Markdown")

@app.post("/webhook")
async def telegram_webhook(update: dict):
    logging.info("‚úÖ Webhook endpoint –æ—Ç—Ä–∏–º–∞–≤ update!")
    logging.info("üì© –í—Ö—ñ–¥–Ω–∏–π update: %s", update)
    telegram_update = Update(**update)
    await dp.feed_update(bot, telegram_update)
    return {"ok": True}

@app.on_event("startup")
async def on_start():
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_stop():
    await bot.delete_webhook()
    logging.info("‚ùå Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

@app.get("/")
async def root():
    return {"status": "working"}

@app.get("/ping")
async def ping():
    return {"status": "pong"}

if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
