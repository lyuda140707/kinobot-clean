import os
import logging
import uvicorn
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from typing import Callable, Dict, Any, Awaitable
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import TelegramObject, InlineKeyboardMarkup, InlineKeyboardButton, Update, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
from io import StringIO
from aiogram.types import Update

load_dotenv()
print("üîç BOT_TOKEN:", os.getenv("BOT_TOKEN"))

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
json_str = os.getenv("GOOGLE_SHEETS_CREDENTIALS_JSON")
if not json_str:
    raise Exception("‚ùå –ó–º—ñ–Ω–Ω–∞ GOOGLE_SHEETS_CREDENTIALS_JSON –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
creds_dict = json.loads(json_str)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gs_client = gspread.authorize(creds)

spreadsheet_id = '1pJU_6N3zyhRCdVfCPXD5RvHAvwVp0v71rKpvhpS3PC8'
sheet = gs_client.open_by_key(spreadsheet_id).worksheet("–õ–∏—Å—Ç1")
data = sheet.get_all_records()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—à—É–∫üîç"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤üì∫"), KeyboardButton(text="–ó–∞ –∂–∞–Ω—Ä–æ–º")],
        [KeyboardButton(text="–ú—É–ª—å—Ç–∏–∫–∏üëß"), KeyboardButton(text="–§—ñ–ª—å–º–∏")],
        [KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞ü¶úü¶õ")]
    ],
    resize_keyboard=True
)

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
GROUP_CHAT_ID = '-1002649275599'
GROUP_URL = 'https://t.me/KinoTochkaUA'

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

subscribe_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –≥—Ä—É–ø—É", url=GROUP_URL)]
])

async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)
        logging.info(f"üîç get_chat_member result: {chat_member}")
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return False

class SubscriptionMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]], event: TelegramObject, data: Dict[str, Any]) -> Any:
        if isinstance(event, types.Message):
            if event.text and any(cmd in event.text.lower() for cmd in ["/my_status", "/get_chat_id"]):
                return await handler(event, data)
            if not await check_subscription(event.from_user.id):
                await event.reply("‚ùå –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø—É:", reply_markup=subscribe_kb)
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    logging.info(f"üëã /start –≤—ñ–¥ @{message.from_user.username} ({message.from_user.id})")
    if await check_subscription(message.from_user.id):
        await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞!\n–û–±–∏—Ä–∞–π –∂–∞–Ω—Ä, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–ú–µ–Ω—é¬ª üëá", reply_markup=main_menu)
    else:
        await message.answer("‚ùå –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø—É:", reply_markup=subscribe_kb)

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer("‚ùì –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /menu, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.", reply_markup=main_menu)

@dp.message(Command("id"))
async def get_id(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")

@dp.message(Command("my_status"))
async def my_status(message: types.Message):
    try:
        chat_member = await bot.get_chat_member(GROUP_CHAT_ID, message.from_user.id)
        await message.answer(f"üìã –í–∞—à —Å—Ç–∞—Ç—É—Å —É –≥—Ä—É–ø—ñ: {chat_member.status}")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")

@dp.message(F.text == "–ú–µ–Ω—é")
@dp.message(Command("menu"))
async def menu_handler(message: types.Message):
    await message.answer("–û—Å—å –≤–∞—à–µ –º–µ–Ω—é:", reply_markup=main_menu)

@dp.message(F.text == "–ü–æ—à—É–∫üîç")
@dp.message(Command("poisk"))
async def prompt_search(message: types.Message):
    logging.info(f"üîç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ü–æ—à—É–∫'")
    await message.answer("üîé –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –∞–±–æ —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –ø–æ—à—É–∫—É:")

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤")
@dp.message(Command("serialiv"))
async def serials_handler(message: types.Message):
    await message.reply("–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message(F.text == "–ó–∞ –∂–∞–Ω—Ä–æ–º")
@dp.message(Command("zhanrom"))
async def genres_handler(message: types.Message):
    await message.reply("–°–µ—Ä—ñ–∞–ª–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º.")

@dp.message(F.text == "–ú—É–ª—å—Ç–∏–∫–∏")
@dp.message(Command("multik"))
async def cartoons_handler(message: types.Message):
    await message.reply("–ú—É–ª—å—Ç–∏–∫–∏.")

@dp.message(F.text == "–§—ñ–ª—å–º–∏")
@dp.message(Command("filmi"))
async def movies_handler(message: types.Message):
    await message.reply("–§—ñ–ª—å–º–∏.")

@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞")
@dp.message(Command("zaprosy"))
async def invite_handler(message: types.Message):
    await message.reply("–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º...")

@dp.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–¥")
@dp.message(Command("pereglyad"))
async def view_handler(message: types.Message):
    await message.reply("üì∫ –ü–µ—Ä–µ–≥–ª—è–¥ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message()
async def universal_handler(message: types.Message):
    if not await check_subscription(message.from_user.id):
        await message.answer("‚ùå –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø—É:", reply_markup=subscribe_kb)
        return

    query = message.text.strip().lower()
    logging.info(f"üîé –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{message.from_user.username} ({message.from_user.id}) —à—É–∫–∞—î: {query}")
    results = []

    query = message.text.strip().lower()
    results = []
    for row in data:
        title = row.get("–ù–∞–∑–≤–∞", "").lower()
        description = row.get("–û–ø–∏—Å", "")
        link = row.get("–ü–æ—Å–∏–ª–∞–Ω–Ω—è", "")
        if query in title:
            results.append(f"üé¨ *{row.get('–ù–∞–∑–≤–∞')}*\nüìù {description}\nüîó [–î–∏–≤–∏—Ç–∏—Å—å]({link})")

    if results:
        await message.answer("\n\n".join(results), parse_mode="Markdown")
    else:
        await message.answer("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.")

@app.post("/sendpulse-webhook")
async def sendpulse_webhook_handler(request: Request):
    try:
        data = await request.json()
        logging.info(f"SendPulse webhook: {data}")
        telegram_id = None
        if isinstance(data, list) and data:
            telegram_id = data[0].get("telegram_id")
        elif isinstance(data, dict):
            telegram_id = data.get("telegram_id")
        is_subscribed = False
        if telegram_id:
            is_subscribed = await check_subscription(int(telegram_id))
        return JSONResponse(content={"allowed": is_subscribed})
    except Exception as e:
        logging.error(f"SendPulse error: {e}")
        return JSONResponse(content={"allowed": False})

@dp.message(Command("get_chat_id"))
async def get_chat_id(message: types.Message):
    await message.answer(
        f"üÜî Chat ID: `{message.chat.id}`\nüìå –¢–∏–ø: {message.chat.type}\nüìõ –ù–∞–∑–≤–∞: {message.chat.title}",
        parse_mode="Markdown"
    )

@app.get("/")
async def root():
    return {"status": "OK"}

@app.post("/")
async def telegram_webhook(update: dict):
    telegram_update = Update(**update)
    await dp.feed_update(bot, telegram_update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

@app.get("/ping")
async def ping():
    return {"status": "pong", "uptime": "working üü¢"}
    
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run("app:app", host="0.0.0.0", port=port)
