import os
import logging
import uvicorn
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from typing import Callable, Dict, Any, Awaitable
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import TelegramObject, InlineKeyboardMarkup, InlineKeyboardButton, Update, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
from collections import defaultdict
from urllib.parse import urlparse
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router
import asyncio

# üåê Load env vars
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
GROUP_CHAT_ID = '-1002649275599'
GROUP_URL = 'https://t.me/KinoTochkaUA'

# üöÄ Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# üöÄ Google Sheets creds
json_str = os.getenv("GOOGLE_SHEETS_CREDENTIALS_JSON")
if not json_str:
    raise Exception("‚ùå GOOGLE_SHEETS_CREDENTIALS_JSON not found")
creds_dict = json.loads(json_str)
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gs_client = gspread.authorize(creds)
sheet = gs_client.open_by_key('1pJU_6N3zyhRCdVfCPXD5RvHAvwVp0v71rKpvhpS3PC8').worksheet("–õ–∏—Å—Ç1")
data = sheet.get_all_records()

# üöÄ FastAPI & Aiogram
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# üîê Subscribe check
subscribe_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=GROUP_URL)]])

async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)
        logging.info(f"üîç {user_id} status: {chat_member.status}")
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"‚ùå Subscription check failed: {e}")
        return False
def parse_telegram_link(link):
    try:
        parts = urlparse(link)
        path_parts = parts.path.strip("/").split("/")
        if len(path_parts) != 2:
            return None, None
        chat_username = f"@{path_parts[0]}"
        message_id = int(path_parts[1])
        return chat_username, message_id
    except Exception as e:
        logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {e}")
        return None, None


main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—à—É–∫üîé"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤üì∫"), KeyboardButton(text="–ó–∞ –∂–∞–Ω—Ä–æ–º")],
        [KeyboardButton(text="–ú—É–ª—å—Ç–∏–∫–∏üëß"), KeyboardButton(text="–§—ñ–ª—å–º–∏"), KeyboardButton(text="üìÖ –ù–æ–≤–∏–Ω–∫–∏")],
        [KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞ü§úü§õ")]
    ],
    resize_keyboard=True
)


async def send_video_from_link(chat_id: int, link: str):
    try:
        # 1. –í–∏—Ç—è–≥–∞—î–º–æ username —ñ message_id –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        parts = link.strip().split("/")
        username = parts[3]
        msg_id = int(parts[4])

        # 2. –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π chat_id –ø–æ username
        chat = await bot.get_chat(f"@{username}")
        real_chat_id = chat.id

        # 3. –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        msg = await bot.get_message(chat_id=real_chat_id, message_id=msg_id)
        if not msg.video:
            return await bot.send_message(chat_id, "‚ö†Ô∏è –¶–µ –Ω–µ –≤—ñ–¥–µ–æ")

        # 4. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–µ–æ –±–µ–∑ –∫–∞–Ω–∞–ª—É
        await bot.send_video(chat_id, video=msg.video.file_id, caption=msg.caption or "")
    
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–µ–æ: {e}")
        await bot.send_message(chat_id, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–µ–æ")
        
async def show_new_releases_effect(message: types.Message):
    await message.answer("üîç –®—É–∫–∞—é –Ω–æ–≤–∏–Ω–∫–∏...")
    await asyncio.sleep(1)
    await message.answer("üß† –ê–Ω–∞–ª—ñ–∑—É—é –±–∞–∑—É...")
    await asyncio.sleep(1)
    await message.answer("üé¨ –ó–Ω–∞–π–¥–µ–Ω–æ! –û–±–∏—Ä–∞–π:")
    await asyncio.sleep(1)

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    logging.info(f"üëã /start –≤—ñ–¥ @{message.from_user.username} ({message.from_user.id})")

    if await check_subscription(message.from_user.id):
        await message.answer(
            "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç *¬´–ö—ñ–Ω–æ–¢–æ—á–∫–∞¬ª* üé¨\n–û–±–∏—Ä–∞–π –∂–∞–Ω—Ä, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–ú–µ–Ω—é¬ª üëá",
            reply_markup=main_menu,
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ùå –£–ø—Å! –í–∏ —â–µ –Ω–µ –∑ –Ω–∞–º–∏...\n\n–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞, *—Å–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è* –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª üëá",
            reply_markup=subscribe_kb,
            parse_mode="Markdown"
        )

# –°–ø—ñ–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
subscribe_text = (
    "‚ùå –£–ø—Å! –í–∏ —â–µ –Ω–µ –∑ –Ω–∞–º–∏ üò¢\n\n"
    "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —É—Å—ñ–º–∞ —Ñ—ñ—à–∫–∞–º–∏ –±–æ—Ç–∞ ‚Äî –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üé¨\n\n"
    "üëá –¢–∏—Ü—è–π –∫–Ω–æ–ø–∫—É ‚Äî —ñ –ª–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!"
)

@dp.message(F.text == "–ü–æ—à—É–∫üîé")
async def search_prompt(message: types.Message):
    await message.answer("üîé –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É...")
    return

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤üì∫")
async def serials_handler(message: types.Message): 
    return

@dp.message(F.text == "–ó–∞ –∂–∞–Ω—Ä–æ–º")
async def genres_handler(message: types.Message):
    return

@dp.message(F.text == "–ú—É–ª—å—Ç–∏–∫–∏üëß")
async def cartoons_handler(message: types.Message):
    return
    

@dp.message(F.text == "–§—ñ–ª—å–º–∏")
async def movies_handler(message: types.Message):
    return

@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞ü§úü§õ")
async def invite_handler(message: types.Message):
    await message.answer("üêí –ü–æ–¥—ñ–ª–∏—Å—å –±–æ—Ç–æ–º –∑ –¥—Ä—É–≥–æ–º: https://t.me/KinoTochka24_bot")
    return
    
@dp.message(F.text == "üìÖ –ù–æ–≤–∏–Ω–∫–∏")
async def new_releases_handler(message: types.Message):
    if not await check_subscription(message.from_user.id):
        return await message.answer(subscribe_text, reply_markup=subscribe_kb)

    await show_new_releases_effect(message)  # üëà –î–æ–¥–∞–Ω–æ –µ—Ñ–µ–∫—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    recent = data[-5:]  # –û—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Å—ñ–≤
    grouped = defaultdict(list)
    for row in recent:
        grouped[row["–ù–∞–∑–≤–∞"]].append(row)

    for title, items in grouped.items():
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=item["–°–µ—Ä—ñ—è"], callback_data=f"send_video|{item['–ü–æ—Å–∏–ª–∞–Ω–Ω—è']}")]
            for item in items
        ])
        await message.answer(f"üÜï *{title}*\n–û–±–µ—Ä–∏ —Å–µ—Ä—ñ—é:", reply_markup=kb, parse_mode="Markdown")



from urllib.parse import urlparse


@dp.message()
async def search_logic(message: types.Message):
    skip_texts = ["–ü–æ—à—É–∫üîç", "–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤üìΩ", "–ó–∞ –∂–∞–Ω—Ä–æ–º", "–ú—É–ª—å—Ç–∏–∫–∏üëß", "–§—ñ–ª—å–º–∏", "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞ü§úü§õ", "üìÖ –ù–æ–≤–∏–Ω–∫–∏"]

    if message.text in skip_texts:
        return

    if not await check_subscription(message.from_user.id):
        return await message.answer("‚ùå –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å!", reply_markup=subscribe_kb)

    query = message.text.strip().lower()
    grouped = defaultdict(list)
    for row in data:
        title = row.get("–ù–∞–∑–≤–∞", "").strip()
        if query in title.lower():
            grouped[title].append(row)

    if not grouped:
        return await message.answer("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    for title, items in grouped.items():
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=item["–°–µ—Ä—ñ—è"], callback_data=f"send_video|{item['–ü–æ—Å–∏–ª–∞–Ω–Ω—è']}")] for item in items
        ])
        await message.answer(f"üÜï *{title}*\n–û–±–µ—Ä–∏ —Å–µ—Ä—ñ—é:", reply_markup=kb, parse_mode="Markdown")

@dp.callback_query(F.data.startswith("send_video|"))
async def handle_video_callback(callback: types.CallbackQuery):
    await callback.answer()  # ‚¨Ö –ó–∞–∫—Ä–∏–≤–∞—î "loading" —É Telegram

    link = callback.data.split("|")[1]
    chat_username, message_id = parse_telegram_link(link)

    if not chat_username or not message_id:
        return await callback.message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")

    try:
        await bot.copy_message(
            chat_id=callback.from_user.id,
            from_chat_id=chat_username,
            message_id=message_id
        )
    except Exception as e:
        logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –≤—ñ–¥–µ–æ: {e}")
        await callback.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–µ–æ")


@app.post("/webhook")
async def telegram_webhook(update: dict):
    logging.info("‚úÖ Webhook endpoint –æ—Ç—Ä–∏–º–∞–≤ update!")
    logging.info("üì© –í—Ö—ñ–¥–Ω–∏–π update: %s", update)
    telegram_update = Update(**update)
    await dp.feed_update(bot, telegram_update)
    return {"ok": True}

@app.on_event("startup")
async def on_start():
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

@app.get("/")
async def root():
    return {"status": "working"}

@app.get("/ping")
async def ping():
    return {"status": "pong"}


